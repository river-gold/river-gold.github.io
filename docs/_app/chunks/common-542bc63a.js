function h(n){let t=[...n];for(let o=n.length-1;o>0;o--){let e=Math.floor(Math.random()*(o+1)),i=t[o];t[o]=t[e],t[e]=i}return t}function l(n=200){window.navigator.vibrate(n)}function d(){return new Promise(function(n,t){try{navigator.geolocation.getCurrentPosition(n,t)}catch(o){console.log(o),t()}})}const{defineProperty:u,getPrototypeOf:g}=Object;function p(n,t,{get:o,enumerable:e,configurable:i,set:f}={}){const{constructor:r}=n;if(o===void 0)throw`@lazy can't be set as a property \`${t}\` on ${r.name} class, using a getter instead!`;if(f)throw`@lazy can't be annotated with get ${t}() existing a setter on ${r.name} class!`;function a(c,s){return s===void 0&&(s=c,c=this),u(c,t,{enumerable:e,configurable:i,value:s}),s}return{get(){return this===n||this.constructor!==r&&g(this).constructor===r?o:a(this,o.call(this))},set:a}}export{d as g,p as l,h as s,l as v};
